from aiogram import types

import sqlite3

from aiogram.dispatcher import FSMContext

from configs.bot_configs import main_menu_message, dp
from interface.get_saved_questionnaires import favourites_display_favourites, interview_display_interview, \
    employment_display_interview, employee_display_employee
from configs.db_configs import session
from interface.custom_filter import custom_filter
from interface.database.create_db import User
from interface.get_questionnaires_list import get_questionnaires_count, get_questionnaires_list
from interface.signup import user_password_waiting


def is_registered(message):
    user_id = message.from_user.id
    user = session.query(User).filter(User.user_id == user_id).first()

    if user:
        return user
    else:
        return False


@dp.message_handler(commands=['start'])
async def start(message: types.Message, state: FSMContext):
    result = is_registered(message)
    if result:
        await main_menu_message(message,
                                f"üëã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {result.first_name} {result.last_name}\n"
                                f"–ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
    else:
        await message.answer("üëã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ\n\n"
                             "‚ùå<b>–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.</b>\n"
                             "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        await user_password_waiting(message, state)


@dp.message_handler(text=['üìö–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∫–µ—Ç—ã'])
async def get_questionnaires(message: types.Message, state: FSMContext):
    if is_registered(message):
        filter_choose_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ['üíø–ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä', 'üìÄ–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä']
        filter_choose_menu.add(*buttons)
        await message.answer('‚òëÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç', reply_markup=filter_choose_menu)
    else:
        await start(message, state)


@dp.message_handler(text=['üíø–ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä'])
async def get_questionnaires(message: types.Message, state: FSMContext):
    if is_registered(message):
        await get_questionnaires_list(message, state, 1)
    else:
        await start(message, state)


@dp.message_handler(text=['üìÄ–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä'])
async def get_questionnaires(message: types.Message, state: FSMContext):
    if is_registered(message):
        await custom_filter(message, state)
    else:
        await start(message, state)


@dp.message_handler(text=["üíº–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã"])
async def get_saved_questionnaires(message: types.Message, state: FSMContext):
    if is_registered(message):
        get_saved_questionnaires_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        buttons = ['‚≠êÔ∏è–ò–∑–±—Ä–∞–Ω–Ω–æ–µ', '–ù–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏', '–ù–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–∏ÃÜ—Å—Ç–≤–µ', '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
        get_saved_questionnaires_keyboard.add(*buttons)
        await message.answer('–ö–∞–∫–∏–µ –∞–Ω–∫–µ—Ç—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?', reply_markup=get_saved_questionnaires_keyboard)
    else:
        await start(message, state)


@dp.message_handler(text=['‚≠êÔ∏è–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'])
async def get_questionnaires(message: types.Message, state: FSMContext):
    if is_registered(message):
        await favourites_display_favourites(message)
    else:
        await start(message, state)


@dp.message_handler(text=['–ù–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏'])
async def get_interview(message: types.Message, state: FSMContext):
    if is_registered(message):
        await interview_display_interview(message)
    else:
        await start(message, state)


@dp.message_handler(text=['–ù–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–∏ÃÜ—Å—Ç–≤–µ'])
async def get_interview(message: types.Message, state: FSMContext):
    if is_registered(message):
        await employment_display_interview(message)
    else:
        await start(message, state)


@dp.message_handler(text=['–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏'])
async def get_interview(message: types.Message, state: FSMContext):
    if is_registered(message):
        await employee_display_employee(message)
    else:
        await start(message, state)


@dp.message_handler(text=['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
async def back_main_menu(message: types.Message, state: FSMContext):
    if is_registered(message):
        await main_menu_message(message, "–ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
    else:
        await start(message, state)


@dp.message_handler(text=['üõ†–ü–æ–º–æ—â—å'])
async def get_questionnaires(message: types.Message, state: FSMContext):
    if is_registered(message):
        await message.answer("<b>üõ†–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>\n\n"
                             "üî∂<b>–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∫–µ—Ç—ã</b> - –ø–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É\n"
                             "      üî∏<b>–ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä</b> - –ø–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç –ø–æ –±–∞–∑–æ–≤–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É\n"
                             "      üî∏<b>–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä</b> - —Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –≤—ã–±–æ—Ä –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞\n\n"
                             "üî∂<b>–ò–∑–±—Ä–∞–Ω–Ω–æ–µ</b> - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç\n\n"
                             "üî∂<b>–ü–æ–º–æ—â—å</b> - –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É\n\n"
                             "üî∂<b>–ù–∞—Å—Ç—Ä–æ–∏ÃÜ–∫–∏</b> - –Ω–∞—Å—Ç—Ä–æ–∏ÃÜ–∫–∏ –±–æ—Ç–∞")
    else:
        await start(message, state)
