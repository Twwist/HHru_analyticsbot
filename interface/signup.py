from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types
from aiogram.types import ReplyKeyboardRemove
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

from configs.bot_configs import dp, main_menu_message
from configs.db_configs import session
from interface.database.create_db import User


class SignUp(StatesGroup):
    password = State()
    name = State()


async def user_password_waiting(message: types.Message, state: FSMContext):
    await message.answer("üîê<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ 'AMBITY'.</b>\n\n"
                         "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(SignUp.password)


@dp.message_handler(state=SignUp.password)
async def handle_user_password(message: types.Message, state: FSMContext):
    password = '1234'
    if message.text == password:
        await sign_up_user(message, state)
    else:
        await state.update_data(password=message.text)
        await user_password_waiting(message, state)
        await message.answer("‚ùå<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å.</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


async def sign_up_user(message: types.Message, state: FSMContext):
    await message.answer('‚úÖ<b>–ü–∞—Ä–æ–ª—å –≤–≤–µ–¥—ë–Ω –≤–µ—Ä–Ω–æ.</b>\n\n'
                         'üë§–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b>–§–∞–º–∏–ª–∏—é –∏ –ò–º—è</b> —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n'
                         '–ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: <b>–ù–∏–≥–º–∞—Ç—É–ª–ª–∏–Ω –ê–π–¥–∞—Ä</b>')
    await state.set_state(SignUp.name)


@dp.message_handler(state=SignUp.name)
async def users_su(message: types.Message, state: FSMContext):
    if len(message.text.split()) != 2:
        await message.answer(
            '‚ùå<b>–§–∞–º–∏–ª–∏—è –∏–ª–∏ –∏–º—è –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b> –ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: <b>–ù–∏–≥–º–∞—Ç—É–ª–ª–∏–Ω –ê–π–¥–∞—Ä</b>')
    else:
        first_name, last_name = message.text.split()
        new_user = User(user_id=message.chat.id, first_name=first_name, last_name=last_name)
        session.add(new_user)
        session.commit()
        await main_menu_message(message, f'üëã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name} {last_name},\n –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å')
        await state.finish()
