import json

import numpy as np
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types
from aiogram.types import ReplyKeyboardRemove
from sqlalchemy import update

from configs.bot_configs import dp, main_menu_message, bot
from configs.db_configs import session
from interface.database.create_db import Filter, Questionnaire, User
from catboost import CatBoostRegressor, Pool


class QuestionnairesGetting(StatesGroup):
    count = State()
    filter_id = State()


coefficients = {
    '–ñ–µ–ª–∞–µ–º–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å': 1500,
    '–û–ø—ã—Ç_—Ä–∞–±–æ—Ç—ã': 1000,
    '–¢—Ä–µ–±—É–µ–º–∞—è_–ó–ü': 100,
    '–í–∞–ª—é—Ç–∞': 100,
    '–í–æ–∑—Ä–∞—Å—Ç': 10,
    '–ì–æ–¥_–æ–∫–æ–Ω—á–∞–Ω–∏—è': 1,
    '–ì–æ—Ä–æ–¥_–ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è': 2500,
    '–î–∞—Ç–∞_–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è': 1,
    '–î–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è': 1,
    '–ü—Ä–µ–¥—ã–¥—É—â–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å': 100,
    '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è_–ó–ü': -1,
    '–ò–º—è': 1,
    '–ù–∞–∑–≤–∞–Ω–∏–µ_–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏': 100,
    '–ù–∞–∑–≤–∞–Ω–∏–µ_—É—á_–∑–∞–≤': 1,
    '–ù–∞—á–∞–ª–æ_—Ä–∞–±–æ—Ç—ã': 1,
    '–û—Ç—á–µ—Å—Ç–≤–æ': 1,
    '–û—Ç—Ä–∞—Å–ª—å_–∫–æ–º–ø–∞–Ω–∏–∏': 100,
    '–û–∫–æ–Ω—á–∞–Ω–∏–µ_—Ä–∞–±–æ—Ç—ã': 1,
    '–ü–æ–ª_—Å–æ–∏—Å–∫–∞—Ç–µ–ª—è': 1000,
    '–ü–æ—á—Ç–∞': 1,
    '–†–µ–≥–∏–æ–Ω_—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è_–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏': 10,
    '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã_—Å–æ–∏—Å–∫–∞—Ç–µ–ª—è': 1,
    '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å': 100,
    '–¢–µ–ª–µ—Ñ–æ–Ω': 1,
    '–¢–∏–ø_—É—á_–∑–∞–≤': 1,
    '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': 2000,
    '–§–∞–º–∏–ª–∏—è': 1
}

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
loaded_model = CatBoostRegressor()
loaded_model.load_model('configs/catboost_model.bin')
feature_importances = loaded_model.get_feature_importance()


async def filter_questionnaires(filter_id):
    filter_description = session.query(Filter).filter(Filter.filter_id == filter_id).first().filter_description
    result = []
    for line in filter_description.split('\n'):
        result.append({line.split()[0]: line.split()[1]})
    return result


async def sort_resumes(state: FSMContext):
    async with state.proxy() as proxy_data:
        filter_id = proxy_data.get('filter_id')
        filter_params = await filter_questionnaires(filter_id)

    resumes = []

    questionnaires = session.query(Questionnaire).all()
    for row in questionnaires:
        item = row.__dict__
        resume = {
            'ID': item.get('id'),
            '–§–∞–º–∏–ª–∏—è': item.get('last_name'),
            '–ò–º—è': item.get('first_name'),
            '–ñ–µ–ª–∞–µ–º–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å': item.get('title'),
            '–ü—Ä–µ–¥—ã–¥—É—â–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å': item.get('position'),
            '–û–ø—ã—Ç_—Ä–∞–±–æ—Ç—ã': item.get('total_experience'),
            '–¢—Ä–µ–±—É–µ–º–∞—è_–ó–ü': item.get('amount'),
            '–í–∞–ª—é—Ç–∞': item.get('currency'),
            '–í–æ–∑—Ä–∞—Å—Ç': item.get('age'),
            '–ì–æ—Ä–æ–¥_–ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è': item.get('area'),
            '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã': item.get('certificate'),
            '–ì–æ–¥_–æ–∫–æ–Ω—á–∞–Ω–∏—è': item.get('education_primary_year'),
            '–î–∞—Ç–∞_–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è': item.get('updated_at'),
            '–î–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è': item.get('created_at'),
            '–î–æ–ª–∂–Ω–æ—Å—Ç—å': item.get('position'),
            '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è_–ó–ü': item.get('salary_amount'),
            '–ù–∞–∑–≤–∞–Ω–∏–µ_–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏': item.get('company'),
            '–ù–∞–∑–≤–∞–Ω–∏–µ_—É—á_–∑–∞–≤': item.get('education_primary_organization'),
            '–ù–∞—á–∞–ª–æ_—Ä–∞–±–æ—Ç—ã': item.get('start'),
            '–û—Ç—á–µ—Å—Ç–≤–æ': item.get('middle_name'),
            '–û—Ç—Ä–∞—Å–ª—å_–∫–æ–º–ø–∞–Ω–∏–∏': item.get('industry'),
            '–û–∫–æ–Ω—á–∞–Ω–∏–µ_—Ä–∞–±–æ—Ç—ã': item.get('end'),
            '–ü–æ–ª_—Å–æ–∏—Å–∫–∞—Ç–µ–ª—è': item.get('gender'),
            '–ü–æ—á—Ç–∞': item.get('email'),
            '–†–µ–≥–∏–æ–Ω_—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è_–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏': item.get('area'),
            '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã_—Å–æ–∏—Å–∫–∞—Ç–µ–ª—è': item.get('certificate'),
            '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å': item.get('education_primary_result'),
            '–¢–µ–ª–µ—Ñ–æ–Ω': item.get('phone'),
            '–¢–∏–ø_—É—á_–∑–∞–≤': item.get('education_primary_name'),
            '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': item.get('level')
        }
        resumes.append(resume)

    sorted_resumes = []

    for resume in resumes:
        total_score = 0
        for filter_param in filter_params:
            param_key = list(filter_param.keys())[0]
            param_value = list(filter_param.values())[0]
            if param_key == '–¢—Ä–µ–±—É–µ–º–∞—è_–ó–ü':
                total_score -= int(resume.get(param_key))
            elif param_key == '–û–ø—ã—Ç_—Ä–∞–±–æ—Ç—ã':
                total_score += int(resume.get(param_key)) * coefficients[param_key]
            else:
                if resume.get(param_key) == param_value:
                    total_score += coefficients[param_key]
        sorted_resumes.append((resume, total_score))

    sorted_resumes.sort(key=lambda x: x[1], reverse=True)
    sorted_resumes = [resume[0] for resume in sorted_resumes]

    return sorted_resumes


async def get_questionnaires_list(message: types.Message, state: FSMContext, filter_id):
    print(filter_id)
    await state.update_data(filter_id=filter_id)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∫–µ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞', reply_markup=ReplyKeyboardRemove())
    await state.set_state(QuestionnairesGetting.count)


@dp.message_handler(state=QuestionnairesGetting.count)
async def get_questionnaires_count(message: types.Message, state: FSMContext):
    try:
        count = int(message.text)
        await get_questionnaire_list(message, count, state)
        await state.update_data(count=count)
    except ValueError:
        await message.answer("‚ùå<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")


async def get_questionnaire_list(message: types.Message, count: int, state: FSMContext):
    async with state.proxy() as proxy_data:
        filter_id = proxy_data.get('filter_id')
        filter_params = await filter_questionnaires(filter_id)

    questionnaires_list = await sort_resumes(state)
    questionnaires_list = questionnaires_list[:count]

    questionnaires_settings_inline_keyboard = types.InlineKeyboardMarkup(row_width=2)

    row1_button = [types.InlineKeyboardButton(text="‚öôÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data="filter_edit")]
    row2_button = [types.InlineKeyboardButton(text="üì§–í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∞–Ω–∫–µ—Ç—ã", callback_data="get_all_questionnaires")]
    row3_button = [types.InlineKeyboardButton(text="üîé–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∞–Ω–∫–µ—Ç—É",
                                              callback_data="get_specifically_questionnaire"), ]
    row4_button = [types.InlineKeyboardButton(text="‚§¥Ô∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main_menu")]

    questionnaires_settings_inline_keyboard.row(*row1_button)
    questionnaires_settings_inline_keyboard.row(*row2_button)
    questionnaires_settings_inline_keyboard.row(*row3_button)
    questionnaires_settings_inline_keyboard.row(*row4_button)

    text = ''
    for i in questionnaires_list:
        resume_info = []
        for param_dict in filter_params:
            for param, value in param_dict.items():
                if param in i:
                    resume_info.append(f"<b>{param}:</b> {i[param]}")
        title, experience, sal_t = i.get('–ñ–µ–ª–∞–µ–º–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å', ''), i.get('–û–ø—ã—Ç_—Ä–∞–±–æ—Ç—ã', ''), i.get('–¢—Ä–µ–±—É–µ–º–∞—è_–ó–ü', '')
        data_for_model = np.array([title, experience]).reshape(1, -1)
        predict = str(loaded_model.predict(data_for_model) + experience * 5000).split(".")[0][1::]
        resume_info.append("<b>–î–æ—Å—Ç–æ–π–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –Ω–∞ —Ä—ã–Ω–∫–µ:</b> " + predict)
        text += (f"ID: {i.get('ID', '')} <b>üë§{i.get('–§–∞–º–∏–ª–∏—è', '')} {i.get('–ò–º—è', '')}</b>\n" +
                 "\n".join(resume_info) + "\n\n")

    await message.answer(f'üîé–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É –∞–Ω–∫–µ—Ç—ã:\n\n {text}',
                         reply_markup=questionnaires_settings_inline_keyboard)
    await state.finish()
    await state.update_data(count=count)
    await state.update_data(filter_id=filter_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä"
@dp.callback_query_handler(text="filter_edit")
async def filter_edit(call: types.CallbackQuery):
    filter_edit_text = '‚öôÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä:\n\n'
    filter_edit_inline_keyboard = types.InlineKeyboardMarkup()
    filter_edit_inline_keyboard.add(
        types.InlineKeyboardButton(text="üìå–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="save_filter_edit"),
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="back_to_get_questionnaire_list_menu")
    )
    await call.message.edit_text(filter_edit_text, reply_markup=filter_edit_inline_keyboard)


@dp.callback_query_handler(text="get_all_questionnaires")
async def get_all_questionnaires(call: types.CallbackQuery):
    await call.message.answer('‚è≥–ó–∞–≥—Ä—É–∂–∞—é –∞–Ω–∫–µ—Ç—ã...')


@dp.callback_query_handler(text="get_specifically_questionnaire")
async def get_specifically_questionnaire(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        count = data.get('count')

    get_specifically_questionnaire_text = '<b>üîñ–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∫–µ—Ç—É</b>\n\n'

    get_specifically_questionnaire_inline_keyboard = types.InlineKeyboardMarkup()

    for i in range(1, count + 1):
        get_specifically_questionnaire_inline_keyboard.add(
            types.InlineKeyboardButton(text=f"üîπ–ê–Ω–∫–µ—Ç–∞ N{i}", callback_data=f"get_specifically_questionnaire_number_{i}")
        )

    get_specifically_questionnaire_inline_keyboard.add(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="back_to_get_questionnaire_list_menu"))

    await call.message.edit_text(get_specifically_questionnaire_text,
                                 reply_markup=get_specifically_questionnaire_inline_keyboard)


@dp.callback_query_handler(text_contains="get_specifically_questionnaire_number_")
async def get_specifically_questionnaire_number_(call: types.CallbackQuery, state: FSMContext):
    i = await sort_resumes(state)
    i = i[int(call.data.split("_")[-1]) - 1]
    await state.update_data(r_id=i['ID'])

    title, experience, sal_t = i.get('–ñ–µ–ª–∞–µ–º–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å', ''), i.get('–û–ø—ã—Ç_—Ä–∞–±–æ—Ç—ã', ''), i.get('–¢—Ä–µ–±—É–µ–º–∞—è_–ó–ü', '')
    data_for_model = np.array([title, experience]).reshape(1, -1)
    predict = str(loaded_model.predict(data_for_model) + experience * 5000).split(".")[0][1::]
    s = predict

    text = f'<b>üîπ–î–∞–Ω–Ω—ã–µ –ø–æ –∞–Ω–∫–µ—Ç–µ N{call.data.split("_")[-1]}</b>\n\n\n'
    text += (f"üîπ <b>ID: {i['ID']}\n\n</b>"
             f"üë§ <b>{i['–§–∞–º–∏–ª–∏—è']} {i['–ò–º—è']}</b>\n\n"
             f"üéØ <b>–ñ–µ–ª–∞–µ–º–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {i['–ñ–µ–ª–∞–µ–º–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å']}\n\n"
             f"üë®‚Äçüè´ <b>–ü—Ä–µ–¥—ã–¥—É—â–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {i['–ü—Ä–µ–¥—ã–¥—É—â–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å']}\n\n"
             f"üìÖ <b>–û–ø—ã—Ç_—Ä–∞–±–æ—Ç—ã:</b> {i['–û–ø—ã—Ç_—Ä–∞–±–æ—Ç—ã']}\n\n"
             f"üí∞ <b>–¢—Ä–µ–±—É–µ–º–∞—è_–ó–ü:</b> {i['–¢—Ä–µ–±—É–µ–º–∞—è_–ó–ü']} {i['–í–∞–ª—é—Ç–∞']}\n"
             f"<b>–î–æ—Å—Ç–æ–π–Ω–∞—è_–∑–∞—Ä–ø–ª–∞—Ç–∞: </b> {s}\n\n"
             f"üë¥ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {i['–í–æ–∑—Ä–∞—Å—Ç']}\n\n"
             f"üèôÔ∏è <b>–ì–æ—Ä–æ–¥_–ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:</b> {i['–ì–æ—Ä–æ–¥_–ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è']}\n\n"
             f"üìú <b>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:</b> {i['–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã']}\n\n"
             f"üéì <b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b> {i['–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ']}")

    back_to_get_questionnaire_list_inline_keyboard = types.InlineKeyboardMarkup()

    questionnaire_id = i['ID']
    is_favourite = session.query(Questionnaire).filter(Questionnaire.id == questionnaire_id).first().favourites
    if is_favourite:
        back_to_get_questionnaire_list_inline_keyboard.add(
            types.InlineKeyboardButton(text="üåï –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data="delete_to_favorites"), )
    else:
        back_to_get_questionnaire_list_inline_keyboard.add(
            types.InlineKeyboardButton(text="üåë –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="add_to_favorites"), )

    back_to_get_questionnaire_list_inline_keyboard.add(
        types.InlineKeyboardButton(text="üõé–°—Ç–∞—Ç—É—Å", callback_data=f"status_{call.data.split('_')[-1]}"), )

    back_to_get_questionnaire_list_inline_keyboard.add(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_get_choose_list_menu"))

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    await call.message.edit_text(text, reply_markup=back_to_get_questionnaire_list_inline_keyboard)


@dp.callback_query_handler(text="add_to_favorites")
async def add_to_favorites(call: types.CallbackQuery):
    questionnaire_id = call.message.text.split("\n\n\n")[1].split("\n\n")[0].split(": ")[1]
    session.execute(update(Questionnaire).where(Questionnaire.id == questionnaire_id).values(favourites=True))
    session.commit()

    back_to_get_questionnaire_list_inline_keyboard = types.InlineKeyboardMarkup()
    back_to_get_questionnaire_list_inline_keyboard.add(
        types.InlineKeyboardButton(text="üåï–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö", callback_data="delete_to_favorites"), )
    back_to_get_questionnaire_list_inline_keyboard.add(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="back_to_get_choose_list_menu"))

    await call.message.edit_text(call.message.text, reply_markup=back_to_get_questionnaire_list_inline_keyboard)


@dp.callback_query_handler(text="delete_to_favorites")
async def delete_from_favorites(call: types.CallbackQuery):
    questionnaire_id = call.message.text.split("\n\n\n")[1].split("\n\n")[0].split(": ")[1]
    session.execute(update(Questionnaire).where(Questionnaire.id == questionnaire_id).values(favourites=False))
    session.commit()

    back_to_get_questionnaire_list_inline_keyboard = types.InlineKeyboardMarkup()
    back_to_get_questionnaire_list_inline_keyboard.add(
        types.InlineKeyboardButton(text="üåë–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="add_to_favorites"), )
    back_to_get_questionnaire_list_inline_keyboard.add(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="back_to_get_choose_list_menu"))

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    await call.message.edit_text(call.message.text,
                                 reply_markup=back_to_get_questionnaire_list_inline_keyboard)


@dp.callback_query_handler(text_contains="status_")
async def status(call: types.CallbackQuery, state: FSMContext):
    i = call.data.split("_")[-1]
    get_status_keyboard = types.InlineKeyboardMarkup()
    get_status_keyboard.add(types.InlineKeyboardButton(text="–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ", callback_data="interview_status"))
    get_status_keyboard.add(types.InlineKeyboardButton(text="–¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", callback_data="employment_status"))
    get_status_keyboard.add(types.InlineKeyboardButton(text="–°–æ—Ç—Ä—É–¥–Ω–∏–∫", callback_data="employee_status"))
    get_status_keyboard.add(
        types.InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥", callback_data=f"get_specifically_questionnaire_number_{i}"))
    text = call.message.text + f"\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è –∞–Ω–∫–µ—Ç—ã:"
    await call.message.edit_text(text, reply_markup=get_status_keyboard)


@dp.callback_query_handler(text_contains="_status")
async def get_status(call: types.CallbackQuery, state: FSMContext):
    new_status_name = call.data.split("_")[0]
    async with state.proxy() as proxy_data:
        r_id = proxy_data.get('r_id')
    session.execute(
        update(Questionnaire).where(Questionnaire.id == r_id).values(status=new_status_name)
    )
    session.commit()
    await bot.answer_callback_query(call.id, text='‚úÖ–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω', show_alert=True)


@dp.callback_query_handler(text='back_to_get_questionnaire_list_menu')
async def back_to_get_questionnaire_list_menu(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as proxy_data:
        filter_id = proxy_data.get('filter_id')
        filter_params = await filter_questionnaires(filter_id)
        count = proxy_data['count']

    questionnaires_list = await sort_resumes(state)
    questionnaires_list = questionnaires_list[:count]

    questionnaires_settings_inline_keyboard = types.InlineKeyboardMarkup(row_width=2)  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —à–∏—Ä–∏–Ω—É —Å—Ç—Ä–æ–∫

    # –°–æ–∑–¥–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
    row1_button = [types.InlineKeyboardButton(text="‚öôÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data="filter_edit")]
    row2_button = [types.InlineKeyboardButton(text="üì§–í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∞–Ω–∫–µ—Ç—ã", callback_data="get_all_questionnaires")]
    row3_button = [types.InlineKeyboardButton(text="üîé–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∞–Ω–∫–µ—Ç—É",
                                              callback_data="get_specifically_questionnaire"), ]
    row4_button = [types.InlineKeyboardButton(text="‚§¥Ô∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main_menu")]

    # –î–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    questionnaires_settings_inline_keyboard.row(*row1_button)
    questionnaires_settings_inline_keyboard.row(*row2_button)
    questionnaires_settings_inline_keyboard.row(*row3_button)
    questionnaires_settings_inline_keyboard.row(*row4_button)

    text = ''
    for i in questionnaires_list:
        resume_info = []
        for param_dict in filter_params:
            for param, value in param_dict.items():
                if param in i:
                    resume_info.append(f"<b>{param}:</b> {i[param]}")
        title, experience, sal_t = i.get('–ñ–µ–ª–∞–µ–º–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å', ''), i.get('–û–ø—ã—Ç_—Ä–∞–±–æ—Ç—ã', ''), i.get('–¢—Ä–µ–±—É–µ–º–∞—è_–ó–ü', '')
        data_for_model = np.array([title, experience]).reshape(1, -1)
        predict = str(loaded_model.predict(data_for_model) + experience * 5000).split(".")[0][1::]
        resume_info.append("<b>–î–æ—Å—Ç–æ–π–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –Ω–∞ —Ä—ã–Ω–∫–µ:</b> " + predict)
        text += (f"ID: {i.get('ID', '')} <b>üë§{i.get('–§–∞–º–∏–ª–∏—è', '')} {i.get('–ò–º—è', '')}</b>\n" +
                 "\n".join(resume_info) + "\n\n")

    await call.message.edit_text(f'üîé–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É –∞–Ω–∫–µ—Ç—ã:\n\n {text}',
                                 reply_markup=questionnaires_settings_inline_keyboard)


@dp.callback_query_handler(text='back_to_get_choose_list_menu')
async def back_to_get_questionnaire_list_menu(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        count = data.get('count')

    get_specifically_questionnaire_text = '<b>üîñ–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∫–µ—Ç—É</b>\n\n'

    get_specifically_questionnaire_inline_keyboard = types.InlineKeyboardMarkup()

    for i in range(1, count + 1):
        get_specifically_questionnaire_inline_keyboard.add(
            types.InlineKeyboardButton(text=f"üîπ–ê–Ω–∫–µ—Ç–∞ N{i}", callback_data=f"get_specifically_questionnaire_number_{i}")
        )

    get_specifically_questionnaire_inline_keyboard.add(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="back_to_get_questionnaire_list_menu"))

    await call.message.edit_text(get_specifically_questionnaire_text,
                                 reply_markup=get_specifically_questionnaire_inline_keyboard)


@dp.callback_query_handler(text='back_main_menu')
async def back_to_get_questionnaire_list_menu(call: types.CallbackQuery, state: FSMContext):
    await main_menu_message(call, "üí¨–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é")
