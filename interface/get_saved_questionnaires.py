from aiogram import Bot, types, Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from catboost import CatBoostRegressor
from sqlalchemy import update

from configs.bot_configs import dp
from configs.bot_token import token
from configs.db_configs import session
from interface.database.create_db import Questionnaire


#
#
#
#
#

async def favourites_display_favourites(message: types.Message):
    favourites = session.query(Questionnaire).filter(Questionnaire.favourites == True).all()

    if favourites:
        questionnaires_settings_inline_keyboard = types.InlineKeyboardMarkup(row_width=2)

        row2_button = [
            types.InlineKeyboardButton(text="üì§–í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ",
                                       callback_data="get_all_favourites_questionnaires")]
        row3_button = [types.InlineKeyboardButton(text="üîé–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∞–Ω–∫–µ—Ç—É",
                                                  callback_data="get_specifically_favourites_questionnaire"), ]
        row4_button = [types.InlineKeyboardButton(text="‚§¥Ô∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main_menu")]

        questionnaires_settings_inline_keyboard.row(*row2_button)
        questionnaires_settings_inline_keyboard.row(*row3_button)
        questionnaires_settings_inline_keyboard.row(*row4_button)

        text = ''
        for favourite in favourites:
            text += (f"üîπ<b>ID:</b> {favourite.id}\n"
                     f"üë§ {favourite.first_name} {favourite.last_name}\n"
                     f"üéØ <b>–ñ–µ–ª–∞–µ–º–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {favourite.title}\n"
                     f"üë®‚Äçüè´ <b>–ü—Ä–µ–¥—ã–¥—É—â–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {favourite.position}\n"
                     f"üìÖ <b>–û–ø—ã—Ç_—Ä–∞–±–æ—Ç—ã:</b> {favourite.total_experience}\n\n")

        await message.answer(f'‚≠êÔ∏è<b>–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã:</b>\n\n'
                             f'{text}', reply_markup=questionnaires_settings_inline_keyboard)
    else:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç."
        await message.answer(text)


@dp.callback_query_handler(text="get_specifically_favourites_questionnaire")
async def favourites_get_specifically_questionnaire(call: types.CallbackQuery):
    favourites = session.query(Questionnaire).filter(Questionnaire.favourites == True).all()
    count = len(favourites)
    get_specifically_questionnaire_text = '<b>üîñ–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–±—Ä–∞–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É</b>\n\n'

    get_specifically_questionnaire_inline_keyboard = types.InlineKeyboardMarkup()

    for i in range(1, count + 1):
        get_specifically_questionnaire_inline_keyboard.add(
            types.InlineKeyboardButton(text=f"üîπ–ê–Ω–∫–µ—Ç–∞ N{i}",
                                       callback_data=f"get_specifically_favourites_questionnaire_number_{i}")
        )

    get_specifically_questionnaire_inline_keyboard.add(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="back_to_get_favourites_questionnaire_list_menu"))

    await call.message.edit_text(get_specifically_questionnaire_text,
                                 reply_markup=get_specifically_questionnaire_inline_keyboard)


@dp.callback_query_handler(text_contains="get_specifically_favourites_questionnaire_number_")
async def favourites_get_specifically_favourites_questionnaire_number_(call: types.CallbackQuery):
    favourites = session.query(Questionnaire).filter(Questionnaire.favourites == True).all()
    i = favourites[int(call.data.split("_")[-1]) - 1]

    back_to_get_questionnaire_list_inline_keyboard = types.InlineKeyboardMarkup()
    back_to_get_questionnaire_list_inline_keyboard.add(
        types.InlineKeyboardButton(text="üåï –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data="favorites_delete_to_favorites"), )

    back_to_get_questionnaire_list_inline_keyboard.add(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="get_specifically_favourites_questionnaire"))

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–Ω–∫–µ—Ç—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
    text = "<b>‚≠êÔ∏è–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã:</b>\n\n"
    for favourite in [i]:
        text += (f"üîπ<b>ID:</b> {favourite.id}\n\n"
                 f"üë§ {favourite.first_name} {favourite.last_name}\n\n"
                 f"üéØ <b>–ñ–µ–ª–∞–µ–º–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {favourite.title}\n\n"
                 f"üë®‚Äçüè´ <b>–ü—Ä–µ–¥—ã–¥—É—â–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {favourite.position}\n\n"
                 f"üìÖ <b>–û–ø—ã—Ç_—Ä–∞–±–æ—Ç—ã:</b> {favourite.total_experience}\n\n"
                 f"üí∞ <b>–¢—Ä–µ–±—É–µ–º–∞—è_–ó–ü:</b> {favourite.amount} {favourite.currency}\n\n"
                 f"üë¥ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {favourite.age}\n\n"
                 f"üèôÔ∏è <b>–ì–æ—Ä–æ–¥_–ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:</b> {favourite.area}\n\n"
                 f"üìú <b>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:</b> {favourite.certificate}\n\n"
                 f"üéì <b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b> {favourite.level}\n\n"
                 )
        text += "\n"
    await call.message.edit_text(text, reply_markup=back_to_get_questionnaire_list_inline_keyboard)


@dp.callback_query_handler(text="favorites_add_to_favorites")
async def favourites_add_to_favorites(call: types.CallbackQuery):
    questionnaire_id = call.message.text.split("\n\n")[1].split(": ")[1]
    session.execute(update(Questionnaire).where(Questionnaire.id == questionnaire_id).values(favourites=True))
    session.commit()

    back_to_get_questionnaire_list_inline_keyboard = types.InlineKeyboardMarkup()
    back_to_get_questionnaire_list_inline_keyboard.add(
        types.InlineKeyboardButton(text="üåï–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö", callback_data="favorites_delete_to_favorites"), )
    back_to_get_questionnaire_list_inline_keyboard.add(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="get_specifically_favourites_questionnaire"))

    await call.message.edit_text(call.message.text, reply_markup=back_to_get_questionnaire_list_inline_keyboard)


@dp.callback_query_handler(text="favorites_delete_to_favorites")
async def favourites_delete_from_favorites(call: types.CallbackQuery):
    questionnaire_id = int(call.message.text.split('\n\n')[1].split('\n')[0].split(': ')[1])
    session.execute(update(Questionnaire).where(Questionnaire.id == questionnaire_id).values(favourites=False))
    session.commit()

    back_to_get_questionnaire_list_inline_keyboard = types.InlineKeyboardMarkup()
    back_to_get_questionnaire_list_inline_keyboard.add(
        types.InlineKeyboardButton(text="üåë–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="favorites_add_to_favorites"), )
    back_to_get_questionnaire_list_inline_keyboard.add(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="get_specifically_favourites_questionnaire"))

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    await call.message.edit_text(call.message.text,
                                 reply_markup=back_to_get_questionnaire_list_inline_keyboard)


@dp.callback_query_handler(text="back_to_get_favourites_questionnaire_list_menu")
async def favourites_back_to_get_favourites_questionnaire_list_menu(call: types.CallbackQuery):
    favourites = session.query(Questionnaire).filter(Questionnaire.favourites == True).all()

    if favourites:
        questionnaires_settings_inline_keyboard = types.InlineKeyboardMarkup(row_width=2)

        row2_button = [
            types.InlineKeyboardButton(text="üì§–í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ",
                                       callback_data="get_all_favourites_questionnaires")]
        row3_button = [types.InlineKeyboardButton(text="üîé–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∞–Ω–∫–µ—Ç—É",
                                                  callback_data="get_specifically_favourites_questionnaire"), ]
        row4_button = [types.InlineKeyboardButton(text="‚§¥Ô∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main_menu")]

        questionnaires_settings_inline_keyboard.row(*row2_button)
        questionnaires_settings_inline_keyboard.row(*row3_button)
        questionnaires_settings_inline_keyboard.row(*row4_button)

        text = ''
        for favourite in favourites:
            text += (f"üîπ<b>ID:</b> {favourite.id}\n"
                     f"üë§ {favourite.first_name} {favourite.last_name}\n"
                     f"üéØ <b>–ñ–µ–ª–∞–µ–º–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {favourite.title}\n"
                     f"üë®‚Äçüè´ <b>–ü—Ä–µ–¥—ã–¥—É—â–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {favourite.position}\n"
                     f"üìÖ <b>–û–ø—ã—Ç_—Ä–∞–±–æ—Ç—ã:</b> {favourite.total_experience}\n\n")

        await call.message.edit_text(f'‚≠êÔ∏è<b>–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã:</b>\n\n'
                                     f'{text}', reply_markup=questionnaires_settings_inline_keyboard)
    else:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç."
        await call.message.edit_text(text)


#
#
#
#
#

async def interview_display_interview(message: types.Message):
    interviews = session.query(Questionnaire).filter(Questionnaire.status == 'interview').all()

    if interviews:
        questionnaires_settings_inline_keyboard = types.InlineKeyboardMarkup(row_width=2)

        row2_button = [
            types.InlineKeyboardButton(text="üì§–í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏",
                                       callback_data="get_all_interview_questionnaires")]
        row3_button = [types.InlineKeyboardButton(text="üîé–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∞–Ω–∫–µ—Ç—É",
                                                  callback_data="get_specifically_interview_questionnaire"), ]
        row4_button = [types.InlineKeyboardButton(text="‚§¥Ô∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main_menu")]

        questionnaires_settings_inline_keyboard.row(*row2_button)
        questionnaires_settings_inline_keyboard.row(*row3_button)
        questionnaires_settings_inline_keyboard.row(*row4_button)

        text = ''
        for interview in interviews:
            text += (f"üîπ<b>ID:</b> {interview.id}\n"
                     f"üë§ {interview.first_name} {interview.last_name}\n"
                     f"üéØ <b>–ñ–µ–ª–∞–µ–º–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {interview.title}\n"
                     f"üë®‚Äçüè´ <b>–ü—Ä–µ–¥—ã–¥—É—â–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {interview.position}\n"
                     f"üìÖ <b>–û–ø—ã—Ç_—Ä–∞–±–æ—Ç—ã:</b> {interview.total_experience}\n\n")

        await message.answer(f'<b>–ê–Ω–∫–µ—Ç—ã –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏:</b>\n\n'
                             f'{text}', reply_markup=questionnaires_settings_inline_keyboard)
    else:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏."
        await message.answer(text)


@dp.callback_query_handler(text="get_specifically_interview_questionnaire")
async def interview_get_specifically_questionnaire(call: types.CallbackQuery):
    interviews = session.query(Questionnaire).filter(Questionnaire.status == 'interview').all()
    count = len(interviews)
    get_specifically_questionnaire_text = '<b>üîñ–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–±—Ä–∞–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É</b>\n\n'

    get_specifically_questionnaire_inline_keyboard = types.InlineKeyboardMarkup()

    for i in range(1, count + 1):
        get_specifically_questionnaire_inline_keyboard.add(
            types.InlineKeyboardButton(text=f"üîπ–ê–Ω–∫–µ—Ç–∞ N{i}",
                                       callback_data=f"get_specifically_interview_questionnaire_number_{i}")
        )

    get_specifically_questionnaire_inline_keyboard.add(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="back_to_get_interview_questionnaire_list_menu"))

    await call.message.edit_text(get_specifically_questionnaire_text,
                                 reply_markup=get_specifically_questionnaire_inline_keyboard)


@dp.callback_query_handler(text_contains="get_specifically_interview_questionnaire_number_")
async def interview_get_specifically_favourites_questionnaire_number_(call: types.CallbackQuery):
    interviews = session.query(Questionnaire).filter(Questionnaire.status == 'interview').all()
    i = interviews[int(call.data.split("_")[-1]) - 1]

    back_to_get_questionnaire_list_inline_keyboard = types.InlineKeyboardMarkup()
    back_to_get_questionnaire_list_inline_keyboard.add(
        types.InlineKeyboardButton(text="üåï –£–¥–∞–ª–∏—Ç—å –∏–∑ –∞–Ω–∫–µ—Ç —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è",
                                   callback_data="interview_delete_to_interview"), )

    back_to_get_questionnaire_list_inline_keyboard.add(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="get_specifically_interview_questionnaire"))

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–Ω–∫–µ—Ç—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
    text = "<b>–ê–Ω–∫–µ—Ç—ã –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏:</b>\n\n"
    for interview in [i]:
        text += (f"üîπ<b>ID:</b> {interview.id}\n\n"
                 f"üë§ {interview.first_name} {interview.last_name}\n\n"
                 f"üéØ <b>–ñ–µ–ª–∞–µ–º–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {interview.title}\n\n"
                 f"üë®‚Äçüè´ <b>–ü—Ä–µ–¥—ã–¥—É—â–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {interview.position}\n\n"
                 f"üìÖ <b>–û–ø—ã—Ç_—Ä–∞–±–æ—Ç—ã:</b> {interview.total_experience}\n\n"
                 f"üí∞ <b>–¢—Ä–µ–±—É–µ–º–∞—è_–ó–ü:</b> {interview.amount} {interview.currency}\n\n"
                 f"üë¥ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {interview.age}\n\n"
                 f"üèôÔ∏è <b>–ì–æ—Ä–æ–¥_–ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:</b> {interview.area}\n\n"
                 f"üìú <b>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:</b> {interview.certificate}\n\n"
                 f"üéì <b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b> {interview.level}\n\n"
                 )
        text += "\n"
    await call.message.edit_text(text, reply_markup=back_to_get_questionnaire_list_inline_keyboard)


@dp.callback_query_handler(text="interview_delete_to_interview")
async def interview_delete_from_interview(call: types.CallbackQuery):
    questionnaire_id = int(call.message.text.split('\n\n')[1].split('\n')[0].split(': ')[1])
    session.execute(update(Questionnaire).where(Questionnaire.id == questionnaire_id).values(status=''))
    session.commit()

    back_to_get_questionnaire_list_inline_keyboard = types.InlineKeyboardMarkup()
    back_to_get_questionnaire_list_inline_keyboard.add(
        types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç—ã —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è",
                                   callback_data="interview_add_to_interview"), )
    back_to_get_questionnaire_list_inline_keyboard.add(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="get_specifically_interview_questionnaire"))

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    await call.message.edit_text(call.message.text, reply_markup=back_to_get_questionnaire_list_inline_keyboard)


@dp.callback_query_handler(text="interview_add_to_interview")
async def interview_add_to_interview(call: types.CallbackQuery):
    questionnaire_id = call.message.text.split("\n\n")[1].split(": ")[1]
    session.execute(update(Questionnaire).where(Questionnaire.id == questionnaire_id).values(status='interview'))
    session.commit()

    back_to_get_questionnaire_list_inline_keyboard = types.InlineKeyboardMarkup()
    back_to_get_questionnaire_list_inline_keyboard.add(
        types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∏–∑ –∞–Ω–∫–µ—Ç —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è",
                                   callback_data="interview_delete_to_interview"), )
    back_to_get_questionnaire_list_inline_keyboard.add(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="get_specifically_interview_questionnaire"))

    await call.message.edit_text(call.message.text, reply_markup=back_to_get_questionnaire_list_inline_keyboard)


@dp.callback_query_handler(text="back_to_get_interview_questionnaire_list_menu")
async def interview_back_to_get_interview_questionnaire_list_menu(call: types.CallbackQuery):
    interviews = session.query(Questionnaire).filter(Questionnaire.status == 'interview').all()

    if interviews:
        questionnaires_settings_inline_keyboard = types.InlineKeyboardMarkup(row_width=2)

        row2_button = [
            types.InlineKeyboardButton(text="üì§–í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏",
                                       callback_data="get_all_interview_questionnaires")]
        row3_button = [types.InlineKeyboardButton(text="üîé–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∞–Ω–∫–µ—Ç—É",
                                                  callback_data="get_specifically_interview_questionnaire"), ]
        row4_button = [types.InlineKeyboardButton(text="‚§¥Ô∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main_menu")]

        questionnaires_settings_inline_keyboard.row(*row2_button)
        questionnaires_settings_inline_keyboard.row(*row3_button)
        questionnaires_settings_inline_keyboard.row(*row4_button)

        text = ''
        for interview in interviews:
            text += (f"üîπ<b>ID:</b> {interview.id}\n"
                     f"üë§ {interview.first_name} {interview.last_name}\n"
                     f"üéØ <b>–ñ–µ–ª–∞–µ–º–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {interview.title}\n"
                     f"üë®‚Äçüè´ <b>–ü—Ä–µ–¥—ã–¥—É—â–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {interview.position}\n"
                     f"üìÖ <b>–û–ø—ã—Ç_—Ä–∞–±–æ—Ç—ã:</b> {interview.total_experience}\n\n")

        await call.message.edit_text(f'<b>–ê–Ω–∫–µ—Ç—ã –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏:</b>\n\n'
                                     f'{text}', reply_markup=questionnaires_settings_inline_keyboard)
    else:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏."
        await call.message.edit_text(text)


#
#
#
#
#

async def employment_display_interview(message: types.Message):
    employments = session.query(Questionnaire).filter(Questionnaire.status == 'employment').all()

    if employments:
        questionnaires_settings_inline_keyboard = types.InlineKeyboardMarkup(row_width=2)

        row2_button = [
            types.InlineKeyboardButton(text="üì§–í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –Ω–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–∏ÃÜ—Å—Ç–≤–µ",
                                       callback_data="get_all_employment_questionnaires")]
        row3_button = [types.InlineKeyboardButton(text="üîé–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∞–Ω–∫–µ—Ç—É",
                                                  callback_data="get_specifically_employments_questionnaire"), ]
        row4_button = [types.InlineKeyboardButton(text="‚§¥Ô∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main_menu")]

        questionnaires_settings_inline_keyboard.row(*row2_button)
        questionnaires_settings_inline_keyboard.row(*row3_button)
        questionnaires_settings_inline_keyboard.row(*row4_button)

        text = ''
        for employment in employments:
            text += (f"üîπ<b>ID:</b> {employment.id}\n"
                     f"üë§ {employment.first_name} {employment.last_name}\n"
                     f"üéØ <b>–ñ–µ–ª–∞–µ–º–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {employment.title}\n"
                     f"üë®‚Äçüè´ <b>–ü—Ä–µ–¥—ã–¥—É—â–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {employment.position}\n"
                     f"üìÖ <b>–û–ø—ã—Ç_—Ä–∞–±–æ—Ç—ã:</b> {employment.total_experience}\n\n")

        await message.answer(f'<b>–ê–Ω–∫–µ—Ç—ã –Ω–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:</b>\n\n'
                             f'{text}', reply_markup=questionnaires_settings_inline_keyboard)
    else:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç –Ω–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ."
        await message.answer(text)


@dp.callback_query_handler(text="get_specifically_employments_questionnaire")
async def employment_get_specifically_questionnaire(call: types.CallbackQuery):
    employments = session.query(Questionnaire).filter(Questionnaire.status == 'employment').all()
    count = len(employments)
    get_specifically_questionnaire_text = '<b>üîñ–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –Ω–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–∏ÃÜ—Å—Ç–≤–µ</b>\n\n'

    get_specifically_questionnaire_inline_keyboard = types.InlineKeyboardMarkup()

    for i in range(1, count + 1):
        get_specifically_questionnaire_inline_keyboard.add(
            types.InlineKeyboardButton(text=f"üîπ–ê–Ω–∫–µ—Ç–∞ N{i}",
                                       callback_data=f"get_specifically_employment_questionnaire_number_{i}")
        )

    get_specifically_questionnaire_inline_keyboard.add(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="back_to_get_employment_questionnaire_list_menu"))

    await call.message.edit_text(get_specifically_questionnaire_text,
                                 reply_markup=get_specifically_questionnaire_inline_keyboard)


@dp.callback_query_handler(text_contains="get_specifically_employment_questionnaire_number_")
async def employment_get_specifically_employment_questionnaire_number_(call: types.CallbackQuery):
    employments = session.query(Questionnaire).filter(Questionnaire.status == 'employment').all()
    i = employments[int(call.data.split("_")[-1]) - 1]

    back_to_get_questionnaire_list_inline_keyboard = types.InlineKeyboardMarkup()
    back_to_get_questionnaire_list_inline_keyboard.add(
        types.InlineKeyboardButton(text="üåï –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–∏ÃÜ—Å—Ç–≤–∞",
                                   callback_data="employment_delete_to_employment"), )

    back_to_get_questionnaire_list_inline_keyboard.add(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="get_specifically_employments_questionnaire"))

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–Ω–∫–µ—Ç—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
    text = "<b>–ê–Ω–∫–µ—Ç—ã —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–∏ÃÜ—Å—Ç–≤–∞:</b>\n\n"
    for employment in [i]:
        text += (f"üîπ<b>ID:</b> {employment.id}\n\n"
                 f"üë§ {employment.first_name} {employment.last_name}\n\n"
                 f"üéØ <b>–ñ–µ–ª–∞–µ–º–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {employment.title}\n\n"
                 f"üë®‚Äçüè´ <b>–ü—Ä–µ–¥—ã–¥—É—â–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {employment.position}\n\n"
                 f"üìÖ <b>–û–ø—ã—Ç_—Ä–∞–±–æ—Ç—ã:</b> {employment.total_experience}\n\n"
                 f"üí∞ <b>–¢—Ä–µ–±—É–µ–º–∞—è_–ó–ü:</b> {employment.amount} {employment.currency}\n\n"
                 f"üë¥ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {employment.age}\n\n"
                 f"üèôÔ∏è <b>–ì–æ—Ä–æ–¥_–ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:</b> {employment.area}\n\n"
                 f"üìú <b>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:</b> {employment.certificate}\n\n"
                 f"üéì <b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b> {employment.level}\n\n"
                 )
        text += "\n"
    await call.message.edit_text(text, reply_markup=back_to_get_questionnaire_list_inline_keyboard)


@dp.callback_query_handler(text="employment_delete_to_employment")
async def employment_delete_from_employment(call: types.CallbackQuery):
    questionnaire_id = int(call.message.text.split('\n\n')[1].split('\n')[0].split(': ')[1])
    session.execute(update(Questionnaire).where(Questionnaire.id == questionnaire_id).values(status=''))
    session.commit()

    back_to_get_questionnaire_list_inline_keyboard = types.InlineKeyboardMarkup()
    back_to_get_questionnaire_list_inline_keyboard.add(
        types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç—ã —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–∏ÃÜ—Å—Ç–≤–∞",
                                   callback_data="employment_add_to_employment"), )
    back_to_get_questionnaire_list_inline_keyboard.add(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="get_specifically_employments_questionnaire"))

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    await call.message.edit_text(call.message.text, reply_markup=back_to_get_questionnaire_list_inline_keyboard)


@dp.callback_query_handler(text="employment_add_to_employment")
async def employment_add_to_employment(call: types.CallbackQuery):
    questionnaire_id = call.message.text.split("\n\n")[1].split(": ")[1]
    session.execute(update(Questionnaire).where(Questionnaire.id == questionnaire_id).values(status='employment'))
    session.commit()

    back_to_get_questionnaire_list_inline_keyboard = types.InlineKeyboardMarkup()
    back_to_get_questionnaire_list_inline_keyboard.add(
        types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∏–∑ –∞–Ω–∫–µ—Ç —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–∏ÃÜ—Å—Ç–≤–∞",
                                   callback_data="employment_delete_to_employment"), )
    back_to_get_questionnaire_list_inline_keyboard.add(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="get_specifically_employments_questionnaire"))

    await call.message.edit_text(call.message.text, reply_markup=back_to_get_questionnaire_list_inline_keyboard)


@dp.callback_query_handler(text="back_to_get_employment_questionnaire_list_menu")
async def employment_back_to_get_employment_questionnaire_list_menu(call: types.CallbackQuery):
    employments = session.query(Questionnaire).filter(Questionnaire.status == 'employment').all()

    if employments:
        questionnaires_settings_inline_keyboard = types.InlineKeyboardMarkup(row_width=2)

        row2_button = [
            types.InlineKeyboardButton(text="üì§–í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –Ω–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–∏ÃÜ—Å—Ç–≤–µ",
                                       callback_data="get_all_employment_questionnaires")]
        row3_button = [types.InlineKeyboardButton(text="üîé–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∞–Ω–∫–µ—Ç—É",
                                                  callback_data="get_specifically_employments_questionnaire"), ]
        row4_button = [types.InlineKeyboardButton(text="‚§¥Ô∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main_menu")]

        questionnaires_settings_inline_keyboard.row(*row2_button)
        questionnaires_settings_inline_keyboard.row(*row3_button)
        questionnaires_settings_inline_keyboard.row(*row4_button)

        text = ''
        for employment in employments:
            text += (f"üîπ<b>ID:</b> {employment.id}\n"
                     f"üë§ {employment.first_name} {employment.last_name}\n"
                     f"üéØ <b>–ñ–µ–ª–∞–µ–º–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {employment.title}\n"
                     f"üë®‚Äçüè´ <b>–ü—Ä–µ–¥—ã–¥—É—â–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {employment.position}\n"
                     f"üìÖ <b>–û–ø—ã—Ç_—Ä–∞–±–æ—Ç—ã:</b> {employment.total_experience}\n\n")

        await call.message.edit_text(f'<b>–ê–Ω–∫–µ—Ç—ã –Ω–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:</b>\n\n'
                                     f'{text}', reply_markup=questionnaires_settings_inline_keyboard)
    else:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç –Ω–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ."
        await call.message.edit_text(text)


#
#
#
#
#

async def employee_display_employee(message: types.Message):
    employees = session.query(Questionnaire).filter(Questionnaire.status == 'employee').all()

    if employees:
        questionnaires_settings_inline_keyboard = types.InlineKeyboardMarkup(row_width=2)

        row2_button = [
            types.InlineKeyboardButton(text="üì§–í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∏–∑ –∞–Ω–∫–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                                       callback_data="get_all_employee_questionnaires")]
        row3_button = [types.InlineKeyboardButton(text="üîé–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∞–Ω–∫–µ—Ç—É",
                                                  callback_data="get_specifically_employee_questionnaire"), ]
        row4_button = [types.InlineKeyboardButton(text="‚§¥Ô∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main_menu")]

        questionnaires_settings_inline_keyboard.row(*row2_button)
        questionnaires_settings_inline_keyboard.row(*row3_button)
        questionnaires_settings_inline_keyboard.row(*row4_button)

        text = ''
        for employee in employees:
            text += (f"üîπ<b>ID:</b> {employee.id}\n"
                     f"üë§ {employee.first_name} {employee.last_name}\n"
                     f"üéØ <b>–ñ–µ–ª–∞–µ–º–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {employee.title}\n"
                     f"üë®‚Äçüè´ <b>–ü—Ä–µ–¥—ã–¥—É—â–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {employee.position}\n"
                     f"üìÖ <b>–û–ø—ã—Ç_—Ä–∞–±–æ—Ç—ã:</b> {employee.total_experience}\n\n")

        await message.answer(f'<b>–ê–Ω–∫–µ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</b>\n\n'
                             f'{text}', reply_markup=questionnaires_settings_inline_keyboard)
    else:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç –Ω–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ."
        await message.answer(text)


@dp.callback_query_handler(text="get_specifically_employee_questionnaire")
async def employee_get_specifically_questionnaire(call: types.CallbackQuery):
    employees = session.query(Questionnaire).filter(Questionnaire.status == 'employee').all()
    count = len(employees)
    get_specifically_questionnaire_text = '<b>üîñ–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∫–µ—Ç—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>\n\n'

    get_specifically_questionnaire_inline_keyboard = types.InlineKeyboardMarkup()

    for i in range(1, count + 1):
        get_specifically_questionnaire_inline_keyboard.add(
            types.InlineKeyboardButton(text=f"üîπ–ê–Ω–∫–µ—Ç–∞ N{i}",
                                       callback_data=f"get_specifically_employee_questionnaire_number_{i}")
        )

    get_specifically_questionnaire_inline_keyboard.add(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="back_to_get_employee_questionnaire_list_menu"))

    await call.message.edit_text(get_specifically_questionnaire_text,
                                 reply_markup=get_specifically_questionnaire_inline_keyboard)


@dp.callback_query_handler(text_contains="get_specifically_employee_questionnaire_number_")
async def employee_get_specifically_employee_questionnaire_number_(call: types.CallbackQuery):
    employees = session.query(Questionnaire).filter(Questionnaire.status == 'employee').all()
    i = employees[int(call.data.split("_")[-1]) - 1]

    back_to_get_questionnaire_list_inline_keyboard = types.InlineKeyboardMarkup()
    back_to_get_questionnaire_list_inline_keyboard.add(
        types.InlineKeyboardButton(text="üåï –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                                   callback_data="employee_delete_to_employee"), )

    back_to_get_questionnaire_list_inline_keyboard.add(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="get_specifically_employee_questionnaire"))

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–Ω–∫–µ—Ç—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
    text = "<b>–ê–Ω–∫–µ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</b>\n\n"
    for employee in [i]:
        text += (f"üîπ<b>ID:</b> {employee.id}\n\n"
                 f"üë§ {employee.first_name} {employee.last_name}\n\n"
                 f"üéØ <b>–ñ–µ–ª–∞–µ–º–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {employee.title}\n\n"
                 f"üë®‚Äçüè´ <b>–ü—Ä–µ–¥—ã–¥—É—â–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {employee.position}\n\n"
                 f"üìÖ <b>–û–ø—ã—Ç_—Ä–∞–±–æ—Ç—ã:</b> {employee.total_experience}\n\n"
                 f"üí∞ <b>–¢—Ä–µ–±—É–µ–º–∞—è_–ó–ü:</b> {employee.amount} {employee.currency}\n\n"
                 f"üë¥ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {employee.age}\n\n"
                 f"üèôÔ∏è <b>–ì–æ—Ä–æ–¥_–ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:</b> {employee.area}\n\n"
                 f"üìú <b>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:</b> {employee.certificate}\n\n"
                 f"üéì <b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b> {employee.level}\n\n"
                 )
        text += "\n"
    await call.message.edit_text(text, reply_markup=back_to_get_questionnaire_list_inline_keyboard)


@dp.callback_query_handler(text="employee_delete_to_employee")
async def employee_delete_from_employee(call: types.CallbackQuery):
    questionnaire_id = int(call.message.text.split('\n\n')[1].split('\n')[0].split(': ')[1])
    session.execute(update(Questionnaire).where(Questionnaire.id == questionnaire_id).values(status=''))
    session.commit()

    back_to_get_questionnaire_list_inline_keyboard = types.InlineKeyboardMarkup()
    back_to_get_questionnaire_list_inline_keyboard.add(
        types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                                   callback_data="employee_add_to_employee"), )
    back_to_get_questionnaire_list_inline_keyboard.add(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="get_specifically_employee_questionnaire"))

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    await call.message.edit_text(call.message.text, reply_markup=back_to_get_questionnaire_list_inline_keyboard)


@dp.callback_query_handler(text="employee_add_to_employee")
async def employment_add_to_employment(call: types.CallbackQuery):
    questionnaire_id = call.message.text.split("\n\n")[1].split(": ")[1]
    session.execute(update(Questionnaire).where(Questionnaire.id == questionnaire_id).values(status='employee'))
    session.commit()

    back_to_get_questionnaire_list_inline_keyboard = types.InlineKeyboardMarkup()
    back_to_get_questionnaire_list_inline_keyboard.add(
        types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∏–∑ –∞–Ω–∫–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                                   callback_data="employee_delete_to_employee"), )
    back_to_get_questionnaire_list_inline_keyboard.add(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="get_specifically_employee_questionnaire"))

    await call.message.edit_text(call.message.text, reply_markup=back_to_get_questionnaire_list_inline_keyboard)


@dp.callback_query_handler(text="back_to_get_employee_questionnaire_list_menu")
async def employment_back_to_get_employment_questionnaire_list_menu(call: types.CallbackQuery):
    employees = session.query(Questionnaire).filter(Questionnaire.status == 'employee').all()

    if employees:
        questionnaires_settings_inline_keyboard = types.InlineKeyboardMarkup(row_width=2)

        row2_button = [
            types.InlineKeyboardButton(text="üì§–í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∏–∑ –∞–Ω–∫–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                                       callback_data="get_all_employee_questionnaires")]
        row3_button = [types.InlineKeyboardButton(text="üîé–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∞–Ω–∫–µ—Ç—É",
                                                  callback_data="get_specifically_employee_questionnaire"), ]
        row4_button = [types.InlineKeyboardButton(text="‚§¥Ô∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main_menu")]

        questionnaires_settings_inline_keyboard.row(*row2_button)
        questionnaires_settings_inline_keyboard.row(*row3_button)
        questionnaires_settings_inline_keyboard.row(*row4_button)

        text = ''
        for employee in employees:
            text += (f"üîπ<b>ID:</b> {employee.id}\n"
                     f"üë§ {employee.first_name} {employee.last_name}\n"
                     f"üéØ <b>–ñ–µ–ª–∞–µ–º–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {employee.title}\n"
                     f"üë®‚Äçüè´ <b>–ü—Ä–µ–¥—ã–¥—É—â–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {employee.position}\n"
                     f"üìÖ <b>–û–ø—ã—Ç_—Ä–∞–±–æ—Ç—ã:</b> {employee.total_experience}\n\n")

        await call.message.edit_text(f'<b>–ê–Ω–∫–µ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</b>\n\n'
                                     f'{text}', reply_markup=questionnaires_settings_inline_keyboard)
    else:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç –Ω–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ."
        await call.message.edit_text(text)
